'use strict'
const path = require('path')
const chalk = require('chalk')
const log = require('./logs.js').log
const logError = require('./logs.js').logError
const logStep = require('./logs.js').logStep
const exportGenerator = require('./exportGenerator')
const dependencies = require('../generators/dependencies')

module.exports = {
  init,
  getTypeDependency,
  setPackageDataFromCli
}

function init (cli) {
  const CURRENT_DIRECTORY = process.cwd()
  const DEFAULT_GENERATOR = 'default'
  const CLI_DEPENDENCIES = 'cli'
  const generatorName = cli.input[0] || DEFAULT_GENERATOR
  const outputDir = cli.flags.output
    ? path.resolve(CURRENT_DIRECTORY, cli.flags.output)
    : path.resolve(CURRENT_DIRECTORY, 'App')

  log(chalk.bold.underline.bgWhite.black(`iniciar üèπ`) +
    chalk.underline.bgWhite.green(` ${generatorName}`))
  try {
    let generator = require(`../generators/${generatorName}/${generatorName}`)
    generator.ci = cli.flags.ci

    if (cli.flags.cli) {
      const cliDep = getTypeDependency(CLI_DEPENDENCIES, cli.flags.cli)
      if (cliDep) {
        logStep(`Add CLI helper: ${cli.flags.cli} ${dependencies.cli[cli.flags.cli]}`)
        generator.package.dependencies = generator.package.dependencies || {}
        generator.package.dependencies[cli.flags.cli] = cliDep
      }
    }
    setPackageDataFromCli(generator.package, cli.flags)
    exportGenerator(generator, outputDir)
  } catch (e) {
    logError(e)
    logError(`Error: Generator "${generatorName}" was not installed.`)
  }
}

/**
 * Redefines package.json
 * @param {object} pkg generator.package
 * @param {object} flags   cli flags
 */
function setPackageDataFromCli (pkg, flags) {
  const keys = Object.keys(flags)
  const alias = {
    ver: 'version'
  }
  keys.forEach(function (key) {
    const cleanKey = alias[key] || key
    if (pkg[cleanKey] !== undefined) {
      pkg[cleanKey] = flags[key]
    }
  })
}

/**
 * Get if exist the info for the package.json dependency
 * @param  {string} type Type of the flag
 * @param  {string} flag cli flag
 * @return {string}      package.json version info from dependencies
 */
function getTypeDependency (type, flag) {
  if (dependencies[type] && dependencies[type][flag]) {
    return dependencies[type][flag]
  }
  throw new Error(`No ${type} found for "${flag}".\n Availables are: ${JSON.stringify(dependencies[type])}`)
}
