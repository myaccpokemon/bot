'use strict'
const fs = require('fs-extra')
const path = require('path')
const log = require('./logs.js').log
const logError = require('./logs.js').logError
const logStep = require('./logs.js').logStep

const DIRECTORY = __dirname
const PATH_CONFS = {
  CI: {
    TRAVIS: '../confs/ci/.travis.yml'
  }
}

module.exports = output

/**
 * Add the project
 * @param  {object} generator Generator data
 * @param  {string} outputDir path
 */
function output (generator, outputDir) {
  const packageJsonDir = path.resolve(outputDir, 'package.json')

  try {
    // Add directories
    addDirs(outputDir, [outputDir].concat(generator.dirs))
    // Add files
    addFiles(outputDir, generator.files)
    // Copy project files
    copyProject(outputDir, generator)
    // Write custom package.json
    fs.writeFileSync(packageJsonDir, prettyStringify(generator.package))

    if (generator.ci) {
      addCi(outputDir, generator.ci)
    }

    logStep(`Your new project is ready at ${outputDir}`)
    log(`\n${generator.message}`)
  } catch (e) {
    logError('Error: We could not generate your project:\n', e)
  }
}

function addCi (outputDir, flag) {
  const ci = {
    travis: {
      path: path.resolve(DIRECTORY, PATH_CONFS.CI.TRAVIS),
      name: '.travis.yml'
    }
  }
  const selectedCI = typeof flag === 'string'
    ? ci[flag]
    : ci.travis
  if (selectedCI) {
    const newFile = `${outputDir}/${selectedCI.name}`

    logStep(`Adding CI conf: ${selectedCI.name}`)
    try {
      fs.copySync(selectedCI.path, newFile)
    } catch (e) {
      logError(`Error: Copying CI conf from ${selectedCI.path}`)
      throw e
    }
  } else {
    logError(`Error: CI house "${flag}" is not valid`)
  }
}

function copyProject (outputDir, generator) {
  const generatorName = generator.name
  const staticsPath = path.resolve(
    DIRECTORY, `../generators/${generatorName}/statics`
  )

  if (!generatorName) {
    throw new Error('generator.name is empty')
  }

  try {
    logStep(`Copying statics`)
    const stats = fs.statSync(staticsPath)
    if (stats.isDirectory()) {
      fs.copySync(staticsPath, outputDir)
    }
  } catch (e) {
    if (e.code !== 'ENOENT') { // Maybe statics is not needed
      logError(`Error: while copying ${staticsPath} to ${outputDir}\n`)
      throw e
    }
  }
}

function prettyStringify (obj) {
  return JSON.stringify(obj, null, '\t')
}

function addFiles (outputDir, files) {
  files.forEach(function (filename) {
    const dest = path.resolve(outputDir, filename)
    try {
      fs.writeFileSync(dest, '')
    } catch (e) {
      logError(`Error: Cannot create a new file in ${dest}.\n`)
      throw e
    }
  })
}

function addDirs (outputDir, dirs) {
  dirs.forEach(function (dir) {
    const dirname = path.resolve(outputDir, dir)
    try {
      fs.mkdirSync(dirname)
      logStep(`Created new directory ${dirname}.`)
    } catch (e) {
      logStep(`Using ${dirname}`)
    }
  })
}
